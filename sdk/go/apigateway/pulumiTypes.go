// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v3/go/aws/lambda"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventHandlerRoute struct {
	Function *lambda.Function `pulumi:"function"`
	Method   *string          `pulumi:"method"`
	Path     *string          `pulumi:"path"`
}

// EventHandlerRouteInput is an input type that accepts EventHandlerRouteArgs and EventHandlerRouteOutput values.
// You can construct a concrete instance of `EventHandlerRouteInput` via:
//
//          EventHandlerRouteArgs{...}
type EventHandlerRouteInput interface {
	pulumi.Input

	ToEventHandlerRouteOutput() EventHandlerRouteOutput
	ToEventHandlerRouteOutputWithContext(context.Context) EventHandlerRouteOutput
}

type EventHandlerRouteArgs struct {
	Function lambda.FunctionInput  `pulumi:"function"`
	Method   pulumi.StringPtrInput `pulumi:"method"`
	Path     pulumi.StringPtrInput `pulumi:"path"`
}

func (EventHandlerRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHandlerRoute)(nil)).Elem()
}

func (i EventHandlerRouteArgs) ToEventHandlerRouteOutput() EventHandlerRouteOutput {
	return i.ToEventHandlerRouteOutputWithContext(context.Background())
}

func (i EventHandlerRouteArgs) ToEventHandlerRouteOutputWithContext(ctx context.Context) EventHandlerRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHandlerRouteOutput)
}

// EventHandlerRouteArrayInput is an input type that accepts EventHandlerRouteArray and EventHandlerRouteArrayOutput values.
// You can construct a concrete instance of `EventHandlerRouteArrayInput` via:
//
//          EventHandlerRouteArray{ EventHandlerRouteArgs{...} }
type EventHandlerRouteArrayInput interface {
	pulumi.Input

	ToEventHandlerRouteArrayOutput() EventHandlerRouteArrayOutput
	ToEventHandlerRouteArrayOutputWithContext(context.Context) EventHandlerRouteArrayOutput
}

type EventHandlerRouteArray []EventHandlerRouteInput

func (EventHandlerRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHandlerRoute)(nil)).Elem()
}

func (i EventHandlerRouteArray) ToEventHandlerRouteArrayOutput() EventHandlerRouteArrayOutput {
	return i.ToEventHandlerRouteArrayOutputWithContext(context.Background())
}

func (i EventHandlerRouteArray) ToEventHandlerRouteArrayOutputWithContext(ctx context.Context) EventHandlerRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHandlerRouteArrayOutput)
}

type EventHandlerRouteOutput struct{ *pulumi.OutputState }

func (EventHandlerRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHandlerRoute)(nil)).Elem()
}

func (o EventHandlerRouteOutput) ToEventHandlerRouteOutput() EventHandlerRouteOutput {
	return o
}

func (o EventHandlerRouteOutput) ToEventHandlerRouteOutputWithContext(ctx context.Context) EventHandlerRouteOutput {
	return o
}

func (o EventHandlerRouteOutput) Function() lambda.FunctionOutput {
	return o.ApplyT(func(v EventHandlerRoute) *lambda.Function { return v.Function }).(lambda.FunctionOutput)
}

func (o EventHandlerRouteOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHandlerRoute) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o EventHandlerRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHandlerRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type EventHandlerRouteArrayOutput struct{ *pulumi.OutputState }

func (EventHandlerRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHandlerRoute)(nil)).Elem()
}

func (o EventHandlerRouteArrayOutput) ToEventHandlerRouteArrayOutput() EventHandlerRouteArrayOutput {
	return o
}

func (o EventHandlerRouteArrayOutput) ToEventHandlerRouteArrayOutputWithContext(ctx context.Context) EventHandlerRouteArrayOutput {
	return o
}

func (o EventHandlerRouteArrayOutput) Index(i pulumi.IntInput) EventHandlerRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHandlerRoute {
		return vs[0].([]EventHandlerRoute)[vs[1].(int)]
	}).(EventHandlerRouteOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHandlerRouteOutput{})
	pulumi.RegisterOutputType(EventHandlerRouteArrayOutput{})
}
